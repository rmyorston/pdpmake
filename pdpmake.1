.\" Text automatically generated by txt2man
.TH PDPMAKE 1 "29 May 2024" "Ron Yorston" "Usage Manual"
.SH NAME
\fBpdpmake \fP- Public domain POSIX make
\fB
.SH SYNOPSIS
.nf
.fam C
\fBpdpmake\fP [\fB--posix\fP] [\fB-eiknpqrSst\fP] [\fB-C\fP \fIdir\fP] [\fB-f\fP \fImkfile\fP] [\fB-j\fP \fInum_jobs\fP]
        [\fB-x\fP \fIpragma\fP] [\fImacro\fP[::]=\fIvalue\fP \.\.\.] [\fItarget\fP \.\.\.]

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
The \fBpdpmake\fP utility creates or updates files following a set of rules.
The created or updated files, called targets, are typically derived from
other files, called prerequisites. Targets are derived according to
rules describing file dependencies and listing commands to be executed.
Rules may be inferred by the utility or explicitly defined in one or
more makefiles.
.SH OPTIONS
.TP
.B
\fB-C\fP \fIdir\fP
Change to \fIdir\fP before reading the makefiles or doing anything
else. If multiple \fB-C\fP options are specified, each is
interpreted relative to the previous one: '\fB-C\fP / \fB-C\fP etc' is
equivalent to '\fB-C\fP /etc'.
.TP
.B
\fB-e\fP
Let environment variables override macro assignments within
makefiles.
.TP
.B
\fB-f\fP \fImkfile\fP
Specify a different makefile. The argument \fImkfile\fP may be
a path to a file, or a minus sign '-' for standard input.
Multiple files may be specified and are read in that order.
.TP
.B
\fB-h\fP
Display help information.
.TP
.B
\fB-i\fP
Ignore non-zero exit codes returned by commands executed
to rebuild files. This is equivalent to using the special
target \fB.IGNORE\fP without prerequisites.
.TP
.B
\fB-j\fP \fInum_jobs\fP
Unused, provided only for compatibility.
.TP
.B
\fB-k\fP
Continue processing after errors are encountered, but only for
targets that don't depend on the target whose creation
caused the error.
.TP
.B
\fB-n\fP
Print commands that would have been executed, but don't
actually execute them unless the command is prefixed with '+'.
.TP
.B
\fB-p\fP
Print the macro definitions and rules that result from reading
the makefiles, then continue with any processing required.
.TP
.B
\fB--posix\fP
Enable strict POSIX-compliant mode.
This option must be the first given on the command line.
.TP
.B
\fB-q\fP
Do  not  execute  any commands, instead exit 0 if the specified
targets are up to date, and 1 otherwise.
.TP
.B
\fB-r\fP
Do not use the built-in rules. Clear the suffix list.
.TP
.B
\fB-S\fP
Stop processing if an error is encountered. This is the default
behaviour and the opposite of \fB-k\fP.
.TP
.B
\fB-s\fP
Do not print the commands as they are executed. This is
equivalent to using the special target \fB.SILENT\fP without
prerequisites.
.TP
.B
\fB-t\fP
Touch files instead of running the commands required to build
them, but not for targets that have no commands or that are
already up-to-date.
.TP
.B
\fB-x\fP \fIpragma\fP
Allow certain \fBpdpmake\fP extensions to apply in strict
POSIX-compliant mode. For a list of supported pragmas
see \fBPRAGMAS\fP below. Multiple \fB-x\fP options can be given.
.TP
.B
\fImacro\fP[::]=\fIvalue\fP
Assign \fIvalue\fP to \fImacro\fP, overriding
the value of \fImacro\fP in the makefile, if it exists.
Macro assignments and targets may be mixed on the command line.
All assignments will be processed first, then the targets.
.SH PRAGMAS
.TP
.B
macro_name
Allow '-' as a valid character in macro names.
.TP
.B
target_name
Allow '-' and '/' as valid characters in target names.
.TP
.B
command_comment
Don't treat the '#' character as introducing a comment
in commands or in target and inference rules.
.TP
.B
empty_suffix
Permit an empty suffix in macro expansions of the form
$(VAR:=.c).
.TP
.B
posix_2017
Enforce the current POSIX 2017 standard rather than the
future POSIX 202X.
.TP
.B
posix_202x
Enforce the future POSIX 202X standard rather than the
current POSIX 2017. In this case the \fBmacro_name\fP and
\fBtarget_name\fP pragmas aren't required as the future
standard allows the additional characters.
.SH EXTENDED DESCRIPTION

\fBpdpmake\fP is a make utility following the POSIX standard:
\fIhttps://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html\fP
.PP
The behavior of the utility should match the behavior described in the
POSIX standard specification, while allowing a set of extensions for
convenience. The behavior may be fine-tuned using command line options,
environment variables, or special targets defined inside makefiles.
.PP
By default \fBpdpmake\fP allows all extensions. To disable all extensions and
enable strict POSIX-compliant mode, do any of the following:
.RS
.IP \(bu 3
Add the special target \fB.POSIX\fP as the first non-comment
line in the first makefile to be processed. This is the standard
approach for declaring a makefile to be POSIX-compliant.
.IP \(bu 3
Add the \fB--posix\fP flag as the first command line option given to
\fBpdpmake\fP. This flag is unique to \fBpdpmake\fP and may not be available
in other make utilities.
.IP \(bu 3
Set the \fBPDPMAKE_POSIXLY_CORRECT\fP environment variable
to any value. This environment variable is unique to \fBpdpmake\fP
and may not be available in other make utilities.
.RE
.PP
While in strict POSIX-compliant mode, you may selectively enable certain
extensions through the use of pragmas (see \fBPRAGMAS\fP).
To use one or more pragmas, do any of the following:
.RS
.IP \(bu 3
Add \fB-x\fP \fIpragma\fP as a command line option given to \fBpdpmake\fP.
Multiple \fB-x\fP options can be given. This flag is unique to \fBpdpmake\fP
and may not be available in other make utilities.
.IP \(bu 3
Add the special target \fB.PRAGMA:\fP \fIpragma\fP to the first
makefile to be processed. Multiple pragmas can be specified.
This special target is unique to \fBpdpmake\fP and may not be available
in other make utilities.
.RE
.PP
\fBpdpmake\fP implements a set of extensions from the future POSIX standard as
well as other make utilities. The set of available extensions are:
.RS
.IP \(bu 3
Nested macro expansion. e.g. $(FOO$(BAR))
.IP \(bu 3
Prerequisites of the \fB.PHONY\fP special target are always
treated as being out-of-date.
.IP \(bu 3
More than one file can be specified on each include line.
.IP \(bu 3
Missing include files can be ignored by using \fB-include\fP \fIfile\fP
instead of \fBinclude\fP \fIfile\fP.
.IP \(bu 3
Missing or out-of-date include files are rebuilt if an appropriate
rule can be found.
.IP \(bu 3
The $^ and $+ internal macros evaluate to all prerequisites of the
current target (not just out-of-date ones, as with $?). $^ removes
duplicated prerequisites from the list, $+ doesn't.
.IP \(bu 3
If no \fBMAKE\fP environment variable is provided the \fBMAKE\fP
macro is initialised from argv[0], with a relative path converted
to absolute.
.IP \(bu 3
The macro assignments ::=, :::=, +=, ?= and != are permitted.
.IP \(bu 3
Pattern macros extend the standard suffix substitution in macro
expansion to allow changes to prefixes as well.
.IP \(bu 3
An escaped newline within a macro expansion on a command line
is replaced by a space.
.IP \(bu 3
The \fBCURDIR\fP macro is set to the current directory during
program start up.
.IP \(bu 3
The \fB-C\fP directory command line option changes the current
working directory.
.IP \(bu 3
Double colon rules are allowed.
.IP \(bu 3
The following conditional keywords are allowed: ifdef, ifndef,
ifeq, ifneq, else, endif
.IP \(bu 3
Archive members can be specified using the form
\fBlib.a\fP(mem1.o mem2.o\.\.\.).
.IP \(bu 3
The macro assignment := is permitted. It is equivalent to ::=
in POSIX.
.IP \(bu 3
Chained inference rules can be used when searching for the
prerequisites of a target. Thus, if there are inference rules
\fI.p.q\fP and \fI.q.r\fP and the file \fIthing.p\fP exists,
make is able to deduce how to create \fIthing.r\fP.
.IP \(bu 3
The wildcards '*', '?' and '[]' can be used in the targets
and prerequisites of target rules.
.IP \(bu 3
\(cq#' on a command line or in a macro expansion doesn't indicate
the start of a comment. In other locations '#' can be escaped by
preceding it with a backslash.
.IP \(bu 3
Duplicated prerequisites are removed when the internal macro
$? is expanded.
.IP \(bu 3
An \fBinclude\fP line with no files specified is silently ignored.
At least one blank must follow the \fBinclude\fP for the line to
be valid.
.IP \(bu 3
The shell used to process build commands isn't started with
the \fB-e\fP option when errors aren't being ignored.
.IP \(bu 3
Macro definitions and targets may be mixed on the command line.
The macro definitions are processed first, then the targets.
.IP \(bu 3
The $< and $* internal macros are given values in target rules.
.IP \(bu 3
When a build command receives a signal the target is removed.
.SH COPYRIGHT
\fBpdpmake\fP is in the public domain. See \fIhttps://unlicense.org\fP
